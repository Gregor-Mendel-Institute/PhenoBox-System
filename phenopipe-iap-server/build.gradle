/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0.2/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application

apply plugin: 'com.google.protobuf'
apply plugin: 'application'
apply plugin: 'org.anarres.jarjar'

buildscript {
  repositories {
    mavenCentral()
    
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    classpath "org.anarres.jarjar:jarjar-gradle:1.0.0"
  }
}
repositories {
    mavenCentral()
    mavenLocal()
   
}
configurations.all {
    resolutionStrategy.force 'org.mongodb:mongodb-driver:3.4.3'
}

def grpcVersion = '1.4.0' 

dependencies {
	
	compile "io.grpc:grpc-netty:${grpcVersion}"
  	compile "io.grpc:grpc-protobuf:${grpcVersion}"
  	compile "io.grpc:grpc-stub:${grpcVersion}"
	compile "io.reactivex.rxjava2:rxjava:2.1.2"
	compile 'com.google.guava:guava:23.0'
	compile "org.mongodb:mongodb-driver:3.4.3"
	compile files("lib/iap_2_0_jarjar.jar")
	/*compile jarjar.repackage {
			from files("lib/iap_2_0.jar")
			destinationName "lib/iap_2_0_jarjar.jar"
			classRename 'com.mongodb.**', 'iap.mongodb.@1'
			classRename 'org.bson.**', 'iap.bson.@1'
			}*/
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}
sourceSets.main.compileClasspath = sourceSets.main.compileClasspath+files("lib/iap_2_0.jar")

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.3.0'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        // To generate deprecated interfaces and static bindService method,
        // turn the enable_deprecated option to true below:
        option 'enable_deprecated=false'
      }
    }
  }
}


ant.importBuild('vendor/IAP/IAP/createReleaseQuick.xml'){antTargetName -> 'ant-'+antTargetName}

ant.importBuild('vendor/IAP/IAP/build.xml'){
	antTargetName -> 'ant-'+antTargetName
}

task iapcreatefilelist(type :Exec){
	commandLine 'sh','./vendor/IAP/make/createfilelist.sh'
}
task iapjar(type: Copy){
	dependsOn 'ant-build'
	dependsOn 'iapcreatefilelist'
	dependsOn 'ant-package'
	tasks.findByName('iapcreatefilelist').mustRunAfter 'ant-build'
   	tasks.findByName('ant-package').mustRunAfter 'iapcreatefilelist'
	from 'vendor/IAP/IAP/release'
	into 'lib'
	include '*.jar'

}


startScripts.enabled = false

task phenopipeIapServer(type: CreateStartScripts) {
  mainClassName = 'at.gmi.djamei.phenopipe.Phenopipe'
  applicationName = 'phenopipe-iap-server'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
  from(phenopipeIapServer)
  fileMode = 0755
}


