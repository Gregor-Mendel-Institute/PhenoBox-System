package at.gmi.djamei.r;

import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.script.ScriptEngine;
import javax.script.ScriptException;


import org.apache.commons.vfs2.CacheStrategy;
import org.apache.commons.vfs2.FileSystemException;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.cache.DefaultFilesCache;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.aether.repository.RemoteRepository;
import org.renjin.aether.AetherPackageLoader;
import org.renjin.eval.Session;
import org.renjin.eval.SessionBuilder;
import org.renjin.primitives.packaging.PackageLoader;
import org.renjin.script.RenjinScriptEngine;
import org.renjin.script.RenjinScriptEngineFactory;
import org.renjin.sexp.ListVector;
import org.renjin.sexp.SEXP;

import at.gmi.djamei.r.exceptions.TaskExecutionException;
import at.gmi.djamei.r.exceptions.UnableToInitializeException;
import at.gmi.djamei.r.exceptions.UnableToRunException;


public abstract class AbstractRTask{
    private static final Logger logger = LogManager.getLogger();
	private static final RenjinScriptEngineFactory engineFactory= new RenjinScriptEngineFactory();
	protected static final String INPUT_KEY="phenopipe_input";
    protected static final String CHARTS_KEY = "phenopipe_charts";
	protected static final String METADATA_KEY="phenopipe_metadata";
	protected ScriptEngine engine = null;
	protected final GrpcRStatusProvider statusProvider;
	protected final String name;
	protected final HashMap<String,String> environment;
	protected final String workingDirectory;
	protected SEXP result;
	protected ListVector.NamedBuilder metadataBuilder;
	/**
	 * Creates an RTask with a name and the according Status Provider to signal progress.
	 * @param name The name of the RTask
	 * @param workingDirectory The working directory to which this task has access to
	 * @param sp The {@link GrpcStatusProvider} for status updates
	 */
	public AbstractRTask(String name, String workingDirectory, GrpcRStatusProvider sp) {
		this(name, workingDirectory, sp,new HashMap<String,String>());
	}
	/**
	 * Creates an RTask with a name and the according Status Provider to signal progress
	 * @param name The name of the RTask
	 * @param workingDirectory The working directory to which this task has access to
	 * @param sp The {@link GrpcStatusProvider} for status updates
	 * @param environment A Map of environment variables the task will set before execution of the R script
	 */
	public AbstractRTask(String name, String workingDirectory, GrpcRStatusProvider sp,HashMap<String,String> environment) {
		this.name=name;
		this.environment=environment;
		this.workingDirectory=workingDirectory;
		this.statusProvider=sp;
		metadataBuilder = ListVector.newNamedBuilder();
	}
	public String getName(){
		return name;
	}
	
	public abstract void execute() throws TaskExecutionException, IOException, UnableToInitializeException;
	
	/**
     * Executes the RTask with the given ScriptEngine
     *
     * @param engine The ScriptEngine which should be used to execute this RTask
     * @throws TaskExecutionException
     * @throws IOException
     * @throws UnableToInitializeException
     */
	public void execute(ScriptEngine engine) throws TaskExecutionException, IOException, UnableToInitializeException{
		this.engine = engine;
		execute();
	}
	/**
	 * Redirects the output of the R Script engine into a PipedReader which is returned
	 * @return An instance of a PipeReader which receives the output of the executed R script (only the output thats generated via 'print')
	 */
	public PipedReader redirectOutput(){
		logger.info("Redirecting engine output");
		
		PipedWriter outputWriter= new PipedWriter();
		PipedReader outputReader=new PipedReader();
		try {
			outputWriter.connect(outputReader);
		} catch (IOException ignored) {
			//this exception is thrown if the writer is already connected to some other reader which can't be the case here
			logger.error("IO Exception when redirecting engine output.");
		}
		engine.getContext().setWriter(outputWriter);
		return outputReader;		
	}
	/**
	 * Fetches the result which was generated by the executed R script
	 * @return the SEXP object representing the result of the R script
	 */
	public SEXP getResult(){
		return result;
	}
	/**
	 * Used to set an arbitrary R object before execution which will be available in the script under the name {@value #INPUT_KEY} 
	 * @param input The SEXP Object to be set
	 */
	public void setInput(SEXP input){
		engine.put(INPUT_KEY, input);
	}
	/**
	 * Sets the given value for the key in the metadata list that is passed into the engine
	 * @param key the key in the named list
	 * @param value the value corresponding to the given key
	 */
	public void addMetadata(String key, String value){
		metadataBuilder.add(key, value);
	}
	
	 protected PackageLoader createPackageLoader(){
			List<RemoteRepository> repos = new ArrayList<>();
			//TODO Make repository configurable
			repos.add(new RemoteRepository.Builder("renjin", "default", "https://nexus.bedatadriven.com/content/groups/public/").build());
			ClassLoader parentLoader = getClass().getClassLoader();
			return new AetherPackageLoader(parentLoader, repos);
		}
	protected FileSystemManager createFileSystemManager(String workingDirectory) throws FileSystemException{
		DefaultFileSystemManager fsm = new RestrictedFileSystemManager(new File("").getAbsolutePath(), workingDirectory);
        fsm.addProvider("file", new DefaultLocalFileProvider());
        fsm.setFilesCache(new DefaultFilesCache());
        fsm.setCacheStrategy(CacheStrategy.ON_RESOLVE);
        fsm.setBaseFile(new File("/"));
        fsm.init();
		fsm.createVirtualFileSystem("file://"+workingDirectory);
		
		return fsm;
	}
	protected Session createScriptSession(FileSystemManager fsm) throws FileSystemException{
		Session session = new SessionBuilder()
				.withDefaultPackages()//TODO use proper PackageLoader to enable scripts to load external packages
				.setPackageLoader(createPackageLoader())
				.setFileSystemManager(fsm)
				.build();
		session.setWorkingDirectory(new File(workingDirectory));
		return session;
	}
	protected RenjinScriptEngine createEngine(Session session){
		return engineFactory.getScriptEngine(session);
	}
	protected void init() throws UnableToInitializeException{
		if (engine == null) {
            try {
                engine = createEngine(createScriptSession(createFileSystemManager(workingDirectory)));
                engine.put(METADATA_KEY, metadataBuilder.build());
            } catch (FileSystemException e) {
                throw new UnableToInitializeException(this, "Unable to create Virtual File System", e);
            }
        }
	}

	/**
	 * Prepares the R Environment for this instance.
	 * 
	 * It sets global variables with the key as the variable name and the value as its value in the Script Engine prefixed by 'phenopipe_'
	 */
	protected void setEnvironment(HashMap<String,String> environment){
		for(String key : environment.keySet()){
			engine.put("phenopipe_"+key, environment.get(key));
		}
	}

	protected void complete() {
		
	}
}
