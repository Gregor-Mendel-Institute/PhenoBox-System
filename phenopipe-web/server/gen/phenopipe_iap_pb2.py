# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: phenopipe_iap.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import phenopipe_pb2 as phenopipe__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='phenopipe_iap.proto',
  package='phenopipe',
  syntax='proto3',
  serialized_pb=_b('\n\x13phenopipe_iap.proto\x12\tphenopipe\x1a\x0fphenopipe.proto\"\x82\x01\n\x17ImportAndAnalyzeRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x17\n\x0f\x65xperiment_name\x18\x02 \x01(\t\x12\x18\n\x10\x63oordinator_name\x18\x03 \x01(\t\x12\x11\n\tuser_name\x18\x04 \x01(\t\x12\x13\n\x0bpipeline_id\x18\x05 \x01(\t\"5\n\x15UploadPipelineRequest\x12\x0e\n\x06\x61uthor\x18\x01 \x01(\t\x12\x0c\n\x04\x66ile\x18\x02 \x01(\x0c\")\n\x16UploadPipelineResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\"#\n\x15\x44\x65letePipelineRequest\x12\n\n\x02id\x18\x01 \x01(\t\")\n\x16\x44\x65letePipelineResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\"c\n\rImportRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x17\n\x0f\x65xperiment_name\x18\x02 \x01(\t\x12\x18\n\x10\x63oordinator_name\x18\x03 \x01(\t\x12\x11\n\tuser_name\x18\x04 \x01(\t\"\'\n\x0eImportResponse\x12\x15\n\rexperiment_id\x18\x01 \x01(\t\"<\n\x0e\x41nalyzeRequest\x12\x15\n\rexperiment_id\x18\x01 \x01(\t\x12\x13\n\x0bpipeline_id\x18\x02 \x01(\t\"$\n\x0f\x41nalyzeResponse\x12\x11\n\tresult_id\x18\x01 \x01(\t\"@\n\rExportRequest\x12\x15\n\rexperiment_id\x18\x01 \x01(\t\x12\x18\n\x10\x64\x65stination_path\x18\x02 \x01(\t\"2\n\x0e\x45xportResponse\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x12\n\nimage_path\x18\x02 \x01(\t\"&\n\rDeleteRequest\x12\x15\n\rexperiment_id\x18\x01 \x01(\t\"!\n\x0e\x44\x65leteResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\"0\n\x12GetPipelineRequest\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0e\n\x06\x61uthor\x18\x02 \x01(\t\"<\n\x13GetPipelineResponse\x12%\n\x08pipeline\x18\x01 \x01(\x0b\x32\x13.phenopipe.Pipeline\"%\n\x13GetPipelinesRequest\x12\x0e\n\x06\x61uthor\x18\x01 \x01(\t\">\n\x14GetPipelinesResponse\x12&\n\tpipelines\x18\x01 \x03(\x0b\x32\x13.phenopipe.Pipeline\"9\n\x08Pipeline\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t2\xdc\x07\n\x0cPhenopipeIap\x12\x46\n\x10ImportExperiment\x12\x18.phenopipe.ImportRequest\x1a\x16.phenopipe.JobResponse\"\x00\x12R\n\x11\x46\x65tchImportResult\x12 .phenopipe.FetchJobResultRequest\x1a\x19.phenopipe.ImportResponse\"\x00\x12H\n\x11\x41nalyzeExperiment\x12\x19.phenopipe.AnalyzeRequest\x1a\x16.phenopipe.JobResponse\"\x00\x12T\n\x12\x46\x65tchAnalyzeResult\x12 .phenopipe.FetchJobResultRequest\x1a\x1a.phenopipe.AnalyzeResponse\"\x00\x12\x46\n\x10\x45xportExperiment\x12\x18.phenopipe.ExportRequest\x1a\x16.phenopipe.JobResponse\"\x00\x12\x46\n\x10\x44\x65leteExperiment\x12\x18.phenopipe.DeleteRequest\x1a\x16.phenopipe.JobResponse\"\x00\x12R\n\x11\x46\x65tchExportResult\x12 .phenopipe.FetchJobResultRequest\x1a\x19.phenopipe.ExportResponse\"\x00\x12W\n\x10ImportAndAnalyze\x12\".phenopipe.ImportAndAnalyzeRequest\x1a\x1b.phenopipe.ProgressResponse\"\x00\x30\x01\x12W\n\x0eUploadPipeline\x12 .phenopipe.UploadPipelineRequest\x1a!.phenopipe.UploadPipelineResponse\"\x00\x12W\n\x0e\x44\x65letePipeline\x12 .phenopipe.DeletePipelineRequest\x1a!.phenopipe.DeletePipelineResponse\"\x00\x12N\n\x0bGetPipeline\x12\x1d.phenopipe.GetPipelineRequest\x1a\x1e.phenopipe.GetPipelineResponse\"\x00\x12Q\n\x0cGetPipelines\x12\x1e.phenopipe.GetPipelinesRequest\x1a\x1f.phenopipe.GetPipelinesResponse\"\x00\x42.\n\x17\x61t.gmi.djamei.phenopipeB\x11PhenoPipeIapProtoP\x01\x62\x06proto3')
  ,
  dependencies=[phenopipe__pb2.DESCRIPTOR,])




_IMPORTANDANALYZEREQUEST = _descriptor.Descriptor(
  name='ImportAndAnalyzeRequest',
  full_name='phenopipe.ImportAndAnalyzeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='phenopipe.ImportAndAnalyzeRequest.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='experiment_name', full_name='phenopipe.ImportAndAnalyzeRequest.experiment_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='coordinator_name', full_name='phenopipe.ImportAndAnalyzeRequest.coordinator_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user_name', full_name='phenopipe.ImportAndAnalyzeRequest.user_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pipeline_id', full_name='phenopipe.ImportAndAnalyzeRequest.pipeline_id', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=182,
)


_UPLOADPIPELINEREQUEST = _descriptor.Descriptor(
  name='UploadPipelineRequest',
  full_name='phenopipe.UploadPipelineRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='author', full_name='phenopipe.UploadPipelineRequest.author', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='file', full_name='phenopipe.UploadPipelineRequest.file', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=184,
  serialized_end=237,
)


_UPLOADPIPELINERESPONSE = _descriptor.Descriptor(
  name='UploadPipelineResponse',
  full_name='phenopipe.UploadPipelineResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='phenopipe.UploadPipelineResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=239,
  serialized_end=280,
)


_DELETEPIPELINEREQUEST = _descriptor.Descriptor(
  name='DeletePipelineRequest',
  full_name='phenopipe.DeletePipelineRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='phenopipe.DeletePipelineRequest.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=282,
  serialized_end=317,
)


_DELETEPIPELINERESPONSE = _descriptor.Descriptor(
  name='DeletePipelineResponse',
  full_name='phenopipe.DeletePipelineResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='phenopipe.DeletePipelineResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=319,
  serialized_end=360,
)


_IMPORTREQUEST = _descriptor.Descriptor(
  name='ImportRequest',
  full_name='phenopipe.ImportRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='phenopipe.ImportRequest.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='experiment_name', full_name='phenopipe.ImportRequest.experiment_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='coordinator_name', full_name='phenopipe.ImportRequest.coordinator_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user_name', full_name='phenopipe.ImportRequest.user_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=362,
  serialized_end=461,
)


_IMPORTRESPONSE = _descriptor.Descriptor(
  name='ImportResponse',
  full_name='phenopipe.ImportResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='phenopipe.ImportResponse.experiment_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=463,
  serialized_end=502,
)


_ANALYZEREQUEST = _descriptor.Descriptor(
  name='AnalyzeRequest',
  full_name='phenopipe.AnalyzeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='phenopipe.AnalyzeRequest.experiment_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pipeline_id', full_name='phenopipe.AnalyzeRequest.pipeline_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=504,
  serialized_end=564,
)


_ANALYZERESPONSE = _descriptor.Descriptor(
  name='AnalyzeResponse',
  full_name='phenopipe.AnalyzeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result_id', full_name='phenopipe.AnalyzeResponse.result_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=566,
  serialized_end=602,
)


_EXPORTREQUEST = _descriptor.Descriptor(
  name='ExportRequest',
  full_name='phenopipe.ExportRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='phenopipe.ExportRequest.experiment_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='destination_path', full_name='phenopipe.ExportRequest.destination_path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=604,
  serialized_end=668,
)


_EXPORTRESPONSE = _descriptor.Descriptor(
  name='ExportResponse',
  full_name='phenopipe.ExportResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='phenopipe.ExportResponse.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_path', full_name='phenopipe.ExportResponse.image_path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=670,
  serialized_end=720,
)


_DELETEREQUEST = _descriptor.Descriptor(
  name='DeleteRequest',
  full_name='phenopipe.DeleteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='phenopipe.DeleteRequest.experiment_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=722,
  serialized_end=760,
)


_DELETERESPONSE = _descriptor.Descriptor(
  name='DeleteResponse',
  full_name='phenopipe.DeleteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='phenopipe.DeleteResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=762,
  serialized_end=795,
)


_GETPIPELINEREQUEST = _descriptor.Descriptor(
  name='GetPipelineRequest',
  full_name='phenopipe.GetPipelineRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='phenopipe.GetPipelineRequest.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='author', full_name='phenopipe.GetPipelineRequest.author', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=797,
  serialized_end=845,
)


_GETPIPELINERESPONSE = _descriptor.Descriptor(
  name='GetPipelineResponse',
  full_name='phenopipe.GetPipelineResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pipeline', full_name='phenopipe.GetPipelineResponse.pipeline', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=847,
  serialized_end=907,
)


_GETPIPELINESREQUEST = _descriptor.Descriptor(
  name='GetPipelinesRequest',
  full_name='phenopipe.GetPipelinesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='author', full_name='phenopipe.GetPipelinesRequest.author', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=909,
  serialized_end=946,
)


_GETPIPELINESRESPONSE = _descriptor.Descriptor(
  name='GetPipelinesResponse',
  full_name='phenopipe.GetPipelinesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pipelines', full_name='phenopipe.GetPipelinesResponse.pipelines', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=948,
  serialized_end=1010,
)


_PIPELINE = _descriptor.Descriptor(
  name='Pipeline',
  full_name='phenopipe.Pipeline',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='phenopipe.Pipeline.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='phenopipe.Pipeline.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='phenopipe.Pipeline.description', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1012,
  serialized_end=1069,
)

_GETPIPELINERESPONSE.fields_by_name['pipeline'].message_type = _PIPELINE
_GETPIPELINESRESPONSE.fields_by_name['pipelines'].message_type = _PIPELINE
DESCRIPTOR.message_types_by_name['ImportAndAnalyzeRequest'] = _IMPORTANDANALYZEREQUEST
DESCRIPTOR.message_types_by_name['UploadPipelineRequest'] = _UPLOADPIPELINEREQUEST
DESCRIPTOR.message_types_by_name['UploadPipelineResponse'] = _UPLOADPIPELINERESPONSE
DESCRIPTOR.message_types_by_name['DeletePipelineRequest'] = _DELETEPIPELINEREQUEST
DESCRIPTOR.message_types_by_name['DeletePipelineResponse'] = _DELETEPIPELINERESPONSE
DESCRIPTOR.message_types_by_name['ImportRequest'] = _IMPORTREQUEST
DESCRIPTOR.message_types_by_name['ImportResponse'] = _IMPORTRESPONSE
DESCRIPTOR.message_types_by_name['AnalyzeRequest'] = _ANALYZEREQUEST
DESCRIPTOR.message_types_by_name['AnalyzeResponse'] = _ANALYZERESPONSE
DESCRIPTOR.message_types_by_name['ExportRequest'] = _EXPORTREQUEST
DESCRIPTOR.message_types_by_name['ExportResponse'] = _EXPORTRESPONSE
DESCRIPTOR.message_types_by_name['DeleteRequest'] = _DELETEREQUEST
DESCRIPTOR.message_types_by_name['DeleteResponse'] = _DELETERESPONSE
DESCRIPTOR.message_types_by_name['GetPipelineRequest'] = _GETPIPELINEREQUEST
DESCRIPTOR.message_types_by_name['GetPipelineResponse'] = _GETPIPELINERESPONSE
DESCRIPTOR.message_types_by_name['GetPipelinesRequest'] = _GETPIPELINESREQUEST
DESCRIPTOR.message_types_by_name['GetPipelinesResponse'] = _GETPIPELINESRESPONSE
DESCRIPTOR.message_types_by_name['Pipeline'] = _PIPELINE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ImportAndAnalyzeRequest = _reflection.GeneratedProtocolMessageType('ImportAndAnalyzeRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMPORTANDANALYZEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.ImportAndAnalyzeRequest)
  ))
_sym_db.RegisterMessage(ImportAndAnalyzeRequest)

UploadPipelineRequest = _reflection.GeneratedProtocolMessageType('UploadPipelineRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPLOADPIPELINEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.UploadPipelineRequest)
  ))
_sym_db.RegisterMessage(UploadPipelineRequest)

UploadPipelineResponse = _reflection.GeneratedProtocolMessageType('UploadPipelineResponse', (_message.Message,), dict(
  DESCRIPTOR = _UPLOADPIPELINERESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.UploadPipelineResponse)
  ))
_sym_db.RegisterMessage(UploadPipelineResponse)

DeletePipelineRequest = _reflection.GeneratedProtocolMessageType('DeletePipelineRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETEPIPELINEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.DeletePipelineRequest)
  ))
_sym_db.RegisterMessage(DeletePipelineRequest)

DeletePipelineResponse = _reflection.GeneratedProtocolMessageType('DeletePipelineResponse', (_message.Message,), dict(
  DESCRIPTOR = _DELETEPIPELINERESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.DeletePipelineResponse)
  ))
_sym_db.RegisterMessage(DeletePipelineResponse)

ImportRequest = _reflection.GeneratedProtocolMessageType('ImportRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMPORTREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.ImportRequest)
  ))
_sym_db.RegisterMessage(ImportRequest)

ImportResponse = _reflection.GeneratedProtocolMessageType('ImportResponse', (_message.Message,), dict(
  DESCRIPTOR = _IMPORTRESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.ImportResponse)
  ))
_sym_db.RegisterMessage(ImportResponse)

AnalyzeRequest = _reflection.GeneratedProtocolMessageType('AnalyzeRequest', (_message.Message,), dict(
  DESCRIPTOR = _ANALYZEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.AnalyzeRequest)
  ))
_sym_db.RegisterMessage(AnalyzeRequest)

AnalyzeResponse = _reflection.GeneratedProtocolMessageType('AnalyzeResponse', (_message.Message,), dict(
  DESCRIPTOR = _ANALYZERESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.AnalyzeResponse)
  ))
_sym_db.RegisterMessage(AnalyzeResponse)

ExportRequest = _reflection.GeneratedProtocolMessageType('ExportRequest', (_message.Message,), dict(
  DESCRIPTOR = _EXPORTREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.ExportRequest)
  ))
_sym_db.RegisterMessage(ExportRequest)

ExportResponse = _reflection.GeneratedProtocolMessageType('ExportResponse', (_message.Message,), dict(
  DESCRIPTOR = _EXPORTRESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.ExportResponse)
  ))
_sym_db.RegisterMessage(ExportResponse)

DeleteRequest = _reflection.GeneratedProtocolMessageType('DeleteRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.DeleteRequest)
  ))
_sym_db.RegisterMessage(DeleteRequest)

DeleteResponse = _reflection.GeneratedProtocolMessageType('DeleteResponse', (_message.Message,), dict(
  DESCRIPTOR = _DELETERESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.DeleteResponse)
  ))
_sym_db.RegisterMessage(DeleteResponse)

GetPipelineRequest = _reflection.GeneratedProtocolMessageType('GetPipelineRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPIPELINEREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.GetPipelineRequest)
  ))
_sym_db.RegisterMessage(GetPipelineRequest)

GetPipelineResponse = _reflection.GeneratedProtocolMessageType('GetPipelineResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETPIPELINERESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.GetPipelineResponse)
  ))
_sym_db.RegisterMessage(GetPipelineResponse)

GetPipelinesRequest = _reflection.GeneratedProtocolMessageType('GetPipelinesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPIPELINESREQUEST,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.GetPipelinesRequest)
  ))
_sym_db.RegisterMessage(GetPipelinesRequest)

GetPipelinesResponse = _reflection.GeneratedProtocolMessageType('GetPipelinesResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETPIPELINESRESPONSE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.GetPipelinesResponse)
  ))
_sym_db.RegisterMessage(GetPipelinesResponse)

Pipeline = _reflection.GeneratedProtocolMessageType('Pipeline', (_message.Message,), dict(
  DESCRIPTOR = _PIPELINE,
  __module__ = 'phenopipe_iap_pb2'
  # @@protoc_insertion_point(class_scope:phenopipe.Pipeline)
  ))
_sym_db.RegisterMessage(Pipeline)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\027at.gmi.djamei.phenopipeB\021PhenoPipeIapProtoP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PhenopipeIapStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ImportExperiment = channel.unary_unary(
          '/phenopipe.PhenopipeIap/ImportExperiment',
          request_serializer=ImportRequest.SerializeToString,
          response_deserializer=phenopipe__pb2.JobResponse.FromString,
          )
      self.FetchImportResult = channel.unary_unary(
          '/phenopipe.PhenopipeIap/FetchImportResult',
          request_serializer=phenopipe__pb2.FetchJobResultRequest.SerializeToString,
          response_deserializer=ImportResponse.FromString,
          )
      self.AnalyzeExperiment = channel.unary_unary(
          '/phenopipe.PhenopipeIap/AnalyzeExperiment',
          request_serializer=AnalyzeRequest.SerializeToString,
          response_deserializer=phenopipe__pb2.JobResponse.FromString,
          )
      self.FetchAnalyzeResult = channel.unary_unary(
          '/phenopipe.PhenopipeIap/FetchAnalyzeResult',
          request_serializer=phenopipe__pb2.FetchJobResultRequest.SerializeToString,
          response_deserializer=AnalyzeResponse.FromString,
          )
      self.ExportExperiment = channel.unary_unary(
          '/phenopipe.PhenopipeIap/ExportExperiment',
          request_serializer=ExportRequest.SerializeToString,
          response_deserializer=phenopipe__pb2.JobResponse.FromString,
          )
      self.DeleteExperiment = channel.unary_unary(
          '/phenopipe.PhenopipeIap/DeleteExperiment',
          request_serializer=DeleteRequest.SerializeToString,
          response_deserializer=phenopipe__pb2.JobResponse.FromString,
          )
      self.FetchExportResult = channel.unary_unary(
          '/phenopipe.PhenopipeIap/FetchExportResult',
          request_serializer=phenopipe__pb2.FetchJobResultRequest.SerializeToString,
          response_deserializer=ExportResponse.FromString,
          )
      self.ImportAndAnalyze = channel.unary_stream(
          '/phenopipe.PhenopipeIap/ImportAndAnalyze',
          request_serializer=ImportAndAnalyzeRequest.SerializeToString,
          response_deserializer=phenopipe__pb2.ProgressResponse.FromString,
          )
      self.UploadPipeline = channel.unary_unary(
          '/phenopipe.PhenopipeIap/UploadPipeline',
          request_serializer=UploadPipelineRequest.SerializeToString,
          response_deserializer=UploadPipelineResponse.FromString,
          )
      self.DeletePipeline = channel.unary_unary(
          '/phenopipe.PhenopipeIap/DeletePipeline',
          request_serializer=DeletePipelineRequest.SerializeToString,
          response_deserializer=DeletePipelineResponse.FromString,
          )
      self.GetPipeline = channel.unary_unary(
          '/phenopipe.PhenopipeIap/GetPipeline',
          request_serializer=GetPipelineRequest.SerializeToString,
          response_deserializer=GetPipelineResponse.FromString,
          )
      self.GetPipelines = channel.unary_unary(
          '/phenopipe.PhenopipeIap/GetPipelines',
          request_serializer=GetPipelinesRequest.SerializeToString,
          response_deserializer=GetPipelinesResponse.FromString,
          )


  class PhenopipeIapServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def ImportExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchImportResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AnalyzeExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchAnalyzeResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ExportExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchExportResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImportAndAnalyze(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UploadPipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeletePipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPipelines(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PhenopipeIapServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ImportExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.ImportExperiment,
            request_deserializer=ImportRequest.FromString,
            response_serializer=phenopipe__pb2.JobResponse.SerializeToString,
        ),
        'FetchImportResult': grpc.unary_unary_rpc_method_handler(
            servicer.FetchImportResult,
            request_deserializer=phenopipe__pb2.FetchJobResultRequest.FromString,
            response_serializer=ImportResponse.SerializeToString,
        ),
        'AnalyzeExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.AnalyzeExperiment,
            request_deserializer=AnalyzeRequest.FromString,
            response_serializer=phenopipe__pb2.JobResponse.SerializeToString,
        ),
        'FetchAnalyzeResult': grpc.unary_unary_rpc_method_handler(
            servicer.FetchAnalyzeResult,
            request_deserializer=phenopipe__pb2.FetchJobResultRequest.FromString,
            response_serializer=AnalyzeResponse.SerializeToString,
        ),
        'ExportExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.ExportExperiment,
            request_deserializer=ExportRequest.FromString,
            response_serializer=phenopipe__pb2.JobResponse.SerializeToString,
        ),
        'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteExperiment,
            request_deserializer=DeleteRequest.FromString,
            response_serializer=phenopipe__pb2.JobResponse.SerializeToString,
        ),
        'FetchExportResult': grpc.unary_unary_rpc_method_handler(
            servicer.FetchExportResult,
            request_deserializer=phenopipe__pb2.FetchJobResultRequest.FromString,
            response_serializer=ExportResponse.SerializeToString,
        ),
        'ImportAndAnalyze': grpc.unary_stream_rpc_method_handler(
            servicer.ImportAndAnalyze,
            request_deserializer=ImportAndAnalyzeRequest.FromString,
            response_serializer=phenopipe__pb2.ProgressResponse.SerializeToString,
        ),
        'UploadPipeline': grpc.unary_unary_rpc_method_handler(
            servicer.UploadPipeline,
            request_deserializer=UploadPipelineRequest.FromString,
            response_serializer=UploadPipelineResponse.SerializeToString,
        ),
        'DeletePipeline': grpc.unary_unary_rpc_method_handler(
            servicer.DeletePipeline,
            request_deserializer=DeletePipelineRequest.FromString,
            response_serializer=DeletePipelineResponse.SerializeToString,
        ),
        'GetPipeline': grpc.unary_unary_rpc_method_handler(
            servicer.GetPipeline,
            request_deserializer=GetPipelineRequest.FromString,
            response_serializer=GetPipelineResponse.SerializeToString,
        ),
        'GetPipelines': grpc.unary_unary_rpc_method_handler(
            servicer.GetPipelines,
            request_deserializer=GetPipelinesRequest.FromString,
            response_serializer=GetPipelinesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'phenopipe.PhenopipeIap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPhenopipeIapServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ImportExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchImportResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AnalyzeExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchAnalyzeResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ExportExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteExperiment(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchExportResult(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImportAndAnalyze(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UploadPipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeletePipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPipeline(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPipelines(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPhenopipeIapStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ImportExperiment(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    ImportExperiment.future = None
    def FetchImportResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    FetchImportResult.future = None
    def AnalyzeExperiment(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    AnalyzeExperiment.future = None
    def FetchAnalyzeResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    FetchAnalyzeResult.future = None
    def ExportExperiment(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    ExportExperiment.future = None
    def DeleteExperiment(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    DeleteExperiment.future = None
    def FetchExportResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    FetchExportResult.future = None
    def ImportAndAnalyze(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def UploadPipeline(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    UploadPipeline.future = None
    def DeletePipeline(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    DeletePipeline.future = None
    def GetPipeline(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetPipeline.future = None
    def GetPipelines(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetPipelines.future = None


  def beta_create_PhenopipeIap_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('phenopipe.PhenopipeIap', 'AnalyzeExperiment'): AnalyzeRequest.FromString,
      ('phenopipe.PhenopipeIap', 'DeleteExperiment'): DeleteRequest.FromString,
      ('phenopipe.PhenopipeIap', 'DeletePipeline'): DeletePipelineRequest.FromString,
      ('phenopipe.PhenopipeIap', 'ExportExperiment'): ExportRequest.FromString,
      ('phenopipe.PhenopipeIap', 'FetchAnalyzeResult'): phenopipe__pb2.FetchJobResultRequest.FromString,
      ('phenopipe.PhenopipeIap', 'FetchExportResult'): phenopipe__pb2.FetchJobResultRequest.FromString,
      ('phenopipe.PhenopipeIap', 'FetchImportResult'): phenopipe__pb2.FetchJobResultRequest.FromString,
      ('phenopipe.PhenopipeIap', 'GetPipeline'): GetPipelineRequest.FromString,
      ('phenopipe.PhenopipeIap', 'GetPipelines'): GetPipelinesRequest.FromString,
      ('phenopipe.PhenopipeIap', 'ImportAndAnalyze'): ImportAndAnalyzeRequest.FromString,
      ('phenopipe.PhenopipeIap', 'ImportExperiment'): ImportRequest.FromString,
      ('phenopipe.PhenopipeIap', 'UploadPipeline'): UploadPipelineRequest.FromString,
    }
    response_serializers = {
      ('phenopipe.PhenopipeIap', 'AnalyzeExperiment'): phenopipe__pb2.JobResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'DeleteExperiment'): phenopipe__pb2.JobResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'DeletePipeline'): DeletePipelineResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ExportExperiment'): phenopipe__pb2.JobResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchAnalyzeResult'): AnalyzeResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchExportResult'): ExportResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchImportResult'): ImportResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'GetPipeline'): GetPipelineResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'GetPipelines'): GetPipelinesResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ImportAndAnalyze'): phenopipe__pb2.ProgressResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ImportExperiment'): phenopipe__pb2.JobResponse.SerializeToString,
      ('phenopipe.PhenopipeIap', 'UploadPipeline'): UploadPipelineResponse.SerializeToString,
    }
    method_implementations = {
      ('phenopipe.PhenopipeIap', 'AnalyzeExperiment'): face_utilities.unary_unary_inline(servicer.AnalyzeExperiment),
      ('phenopipe.PhenopipeIap', 'DeleteExperiment'): face_utilities.unary_unary_inline(servicer.DeleteExperiment),
      ('phenopipe.PhenopipeIap', 'DeletePipeline'): face_utilities.unary_unary_inline(servicer.DeletePipeline),
      ('phenopipe.PhenopipeIap', 'ExportExperiment'): face_utilities.unary_unary_inline(servicer.ExportExperiment),
      ('phenopipe.PhenopipeIap', 'FetchAnalyzeResult'): face_utilities.unary_unary_inline(servicer.FetchAnalyzeResult),
      ('phenopipe.PhenopipeIap', 'FetchExportResult'): face_utilities.unary_unary_inline(servicer.FetchExportResult),
      ('phenopipe.PhenopipeIap', 'FetchImportResult'): face_utilities.unary_unary_inline(servicer.FetchImportResult),
      ('phenopipe.PhenopipeIap', 'GetPipeline'): face_utilities.unary_unary_inline(servicer.GetPipeline),
      ('phenopipe.PhenopipeIap', 'GetPipelines'): face_utilities.unary_unary_inline(servicer.GetPipelines),
      ('phenopipe.PhenopipeIap', 'ImportAndAnalyze'): face_utilities.unary_stream_inline(servicer.ImportAndAnalyze),
      ('phenopipe.PhenopipeIap', 'ImportExperiment'): face_utilities.unary_unary_inline(servicer.ImportExperiment),
      ('phenopipe.PhenopipeIap', 'UploadPipeline'): face_utilities.unary_unary_inline(servicer.UploadPipeline),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PhenopipeIap_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('phenopipe.PhenopipeIap', 'AnalyzeExperiment'): AnalyzeRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'DeleteExperiment'): DeleteRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'DeletePipeline'): DeletePipelineRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ExportExperiment'): ExportRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchAnalyzeResult'): phenopipe__pb2.FetchJobResultRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchExportResult'): phenopipe__pb2.FetchJobResultRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'FetchImportResult'): phenopipe__pb2.FetchJobResultRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'GetPipeline'): GetPipelineRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'GetPipelines'): GetPipelinesRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ImportAndAnalyze'): ImportAndAnalyzeRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'ImportExperiment'): ImportRequest.SerializeToString,
      ('phenopipe.PhenopipeIap', 'UploadPipeline'): UploadPipelineRequest.SerializeToString,
    }
    response_deserializers = {
      ('phenopipe.PhenopipeIap', 'AnalyzeExperiment'): phenopipe__pb2.JobResponse.FromString,
      ('phenopipe.PhenopipeIap', 'DeleteExperiment'): phenopipe__pb2.JobResponse.FromString,
      ('phenopipe.PhenopipeIap', 'DeletePipeline'): DeletePipelineResponse.FromString,
      ('phenopipe.PhenopipeIap', 'ExportExperiment'): phenopipe__pb2.JobResponse.FromString,
      ('phenopipe.PhenopipeIap', 'FetchAnalyzeResult'): AnalyzeResponse.FromString,
      ('phenopipe.PhenopipeIap', 'FetchExportResult'): ExportResponse.FromString,
      ('phenopipe.PhenopipeIap', 'FetchImportResult'): ImportResponse.FromString,
      ('phenopipe.PhenopipeIap', 'GetPipeline'): GetPipelineResponse.FromString,
      ('phenopipe.PhenopipeIap', 'GetPipelines'): GetPipelinesResponse.FromString,
      ('phenopipe.PhenopipeIap', 'ImportAndAnalyze'): phenopipe__pb2.ProgressResponse.FromString,
      ('phenopipe.PhenopipeIap', 'ImportExperiment'): phenopipe__pb2.JobResponse.FromString,
      ('phenopipe.PhenopipeIap', 'UploadPipeline'): UploadPipelineResponse.FromString,
    }
    cardinalities = {
      'AnalyzeExperiment': cardinality.Cardinality.UNARY_UNARY,
      'DeleteExperiment': cardinality.Cardinality.UNARY_UNARY,
      'DeletePipeline': cardinality.Cardinality.UNARY_UNARY,
      'ExportExperiment': cardinality.Cardinality.UNARY_UNARY,
      'FetchAnalyzeResult': cardinality.Cardinality.UNARY_UNARY,
      'FetchExportResult': cardinality.Cardinality.UNARY_UNARY,
      'FetchImportResult': cardinality.Cardinality.UNARY_UNARY,
      'GetPipeline': cardinality.Cardinality.UNARY_UNARY,
      'GetPipelines': cardinality.Cardinality.UNARY_UNARY,
      'ImportAndAnalyze': cardinality.Cardinality.UNARY_STREAM,
      'ImportExperiment': cardinality.Cardinality.UNARY_UNARY,
      'UploadPipeline': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'phenopipe.PhenopipeIap', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
